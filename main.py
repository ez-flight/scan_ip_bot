import os
import logging
import pandas as pd
import schedule
import time
import threading
from pythonping import ping
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv
from ipaddress import IPv4Network
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
NETWORK = os.getenv('NETWORK', '192.168.1.0/24')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []
SCAN_INTERVAL = int(os.getenv('SCAN_INTERVAL', '15'))  # –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
CRITICAL_TAG = os.getenv('CRITICAL_TAG', 'Critical')

# –§–∞–π–ª—ã
IGNORED_IPS_FILE = 'ignored_ips.txt'
SCAN_RESULTS_FILE = 'ip_scan_results.xlsx'
SCAN_HISTORY_FILE = 'scan_history.xlsx'

class IPManager:
    def __init__(self):
        self.ignored_ips = self._load_ignored_ips()
        self.last_results = None
        self.critical_changes = []
    
    def _load_ignored_ips(self):
        try:
            with open(IGNORED_IPS_FILE, 'r') as f:
                return set(line.strip() for line in f if line.strip())
        except FileNotFoundError:
            return set()
    
    def save_ignored_ips(self):
        with open(IGNORED_IPS_FILE, 'w') as f:
            for ip in self.ignored_ips:
                f.write(f"{ip}\n")
    
    def add_ignored_ip(self, ip):
        self.ignored_ips.add(ip)
        self.save_ignored_ips()
    
    def remove_ignored_ip(self, ip):
        if ip in self.ignored_ips:
            self.ignored_ips.remove(ip)
            self.save_ignored_ips()
            return True
        return False
    
    def check_critical_changes(self, new_results):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤"""
        if self.last_results is None:
            self.last_results = new_results
            return []
        
        critical_prev = self.last_results[self.last_results['Tags'] == CRITICAL_TAG]
        critical_new = new_results[new_results['Tags'] == CRITICAL_TAG]
        
        changes = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        for ip in critical_prev['IP']:
            if ip in critical_new['IP'].values:
                prev_status = critical_prev[critical_prev['IP'] == ip]['Status'].values[0]
                new_status = critical_new[critical_new['IP'] == ip]['Status'].values[0]
                
                if prev_status != new_status:
                    changes.append(f"{ip}: {prev_status} ‚Üí {new_status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
        new_critical = set(critical_new['IP']) - set(critical_prev['IP'])
        for ip in new_critical:
            changes.append(f"–ù–æ–≤—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–∑–µ–ª: {ip}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
        missing_critical = set(critical_prev['IP']) - set(critical_new['IP'])
        for ip in missing_critical:
            changes.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–∑–µ–ª –ø—Ä–æ–ø–∞–ª: {ip}")
        
        self.last_results = new_results
        self.critical_changes = changes
        return changes

ip_manager = IPManager()

def scan_network(network: str) -> pd.DataFrame:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DataFrame"""
    ips = [str(ip) for ip in IPv4Network(network).hosts()]
    results = []
    
    def ping_ip(ip):
        try:
            response = ping(ip, count=2, timeout=1)
            return {
                'IP': ip,
                'Status': 'Online' if response.success() else 'Offline',
                'Avg Response (ms)': response.rtt_avg_ms if response.success() else None,
                'Packet Loss (%)': response.packet_loss * 100 if response.success() else 100,
                'Last Seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'Tags': ''
            }
        except Exception:
            return {
                'IP': ip,
                'Status': 'Error',
                'Avg Response (ms)': None,
                'Packet Loss (%)': 100,
                'Last Seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'Tags': ''
            }
    
    with ThreadPoolExecutor(max_workers=50) as executor:
        results = list(executor.map(ping_ip, ips))
    
    df = pd.DataFrame(results)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    try:
        prev_df = pd.read_excel(SCAN_RESULTS_FILE)
        df = df.merge(prev_df[['IP', 'Tags']], on='IP', how='left')
        df['Tags'] = df['Tags_y'].combine_first(df['Tags_x'])
        df.drop(['Tags_x', 'Tags_y'], axis=1, inplace=True)
    except FileNotFoundError:
        pass
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö IP
    df = df[~df['IP'].isin(ip_manager.ignored_ips)]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df.to_excel(SCAN_RESULTS_FILE, index=False)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    try:
        history_df = pd.read_excel(SCAN_HISTORY_FILE)
    except FileNotFoundError:
        history_df = pd.DataFrame()
    
    history_df = pd.concat([history_df, df], ignore_index=True)
    history_df.to_excel(SCAN_HISTORY_FILE, index=False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
    ip_manager.check_critical_changes(df)
    
    return df

def scheduled_scan(context: CallbackContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"""
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏...")
    try:
        df = scan_network(NETWORK)
        online_count = df[df['Status'] == 'Online'].shape[0]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
        if ip_manager.critical_changes:
            message = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–∞—Ö:\n" + "\n".join(ip_manager.critical_changes)
            for admin_id in ADMIN_IDS:
                context.bot.send_message(chat_id=admin_id, text=message)
        
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–Ω–ª–∞–π–Ω: {online_count}/{len(df)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def start_scheduler(updater):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    schedule.every(SCAN_INTERVAL).minutes.do(
        scheduled_scan, 
        context=updater.dispatcher
    )
    
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(1)
    
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    keyboard = [
        ['üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å', 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'],
        ['üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ IP', 'üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏'],
        ['‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_markdown_v2(
        fr'–ü—Ä–∏–≤–µ—Ç {user.mention_markdown_v2()}\! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏\.\n'
        f'–ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL} –º–∏–Ω\.',
        reply_markup=reply_markup
    )

def handle_tag_management(update: Update, context: CallbackContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ –¥–ª—è IP-–∞–¥—Ä–µ—Å–æ–≤"""
    try:
        df = pd.read_excel(SCAN_RESULTS_FILE)
        critical_ips = df[df['Tags'] == CRITICAL_TAG]['IP'].tolist()
        
        if critical_ips:
            message = (f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã ({CRITICAL_TAG}):\n" + 
                      "\n".join(critical_ips) + 
                      "\n\n–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥: '—Ç–µ–≥ IP'\n–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥: '—É–¥–∞–ª–∏—Ç—å IP'")
        else:
            message = (f"–ù–µ—Ç —É–∑–ª–æ–≤ —Å —Ç–µ–≥–æ–º {CRITICAL_TAG}.\n\n"
                      "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥: '—Ç–µ–≥ IP'")
        
        update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–≥–∞–º–∏")

def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if text == 'üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å':
        update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...")
        try:
            df = scan_network(NETWORK)
            online_count = df[df['Status'] == 'Online'].shape[0]
            update.message.reply_text(
                f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {online_count}/{len(df)}\n"
                f"–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {SCAN_RESULTS_FILE}"
            )
            
            if ip_manager.critical_changes:
                message = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–∞—Ö:\n" + "\n".join(ip_manager.critical_changes)
                update.message.reply_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ç–∏!")
    
    elif text == 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
        try:
            with open(SCAN_RESULTS_FILE, 'rb') as f:
                update.message.reply_document(
                    document=f,
                    caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"
                )
        except FileNotFoundError:
            update.message.reply_text("‚ÑπÔ∏è –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    
    elif text == 'üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ IP':
        handle_ignored_ips(update)
    
    elif text == 'üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏':
        handle_tag_management(update, context)
    
    elif text.startswith('—Ç–µ–≥ '):
        ip = text[4:].strip()
        try:
            df = pd.read_excel(SCAN_RESULTS_FILE)
            df.loc[df['IP'] == ip, 'Tags'] = CRITICAL_TAG
            df.to_excel(SCAN_RESULTS_FILE, index=False)
            update.message.reply_text(f"‚úÖ –¢–µ–≥ '{CRITICAL_TAG}' –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {ip}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞: {e}")
            update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –¥–ª—è {ip}")
    
    elif text.startswith('—É–¥–∞–ª–∏—Ç—å '):
        ip = text[8:].strip()
        try:
            df = pd.read_excel(SCAN_RESULTS_FILE)
            df.loc[df['IP'] == ip, 'Tags'] = ''
            df.to_excel(SCAN_RESULTS_FILE, index=False)
            update.message.reply_text(f"‚úÖ –¢–µ–≥ —É–¥–∞–ª—ë–Ω –¥–ª—è {ip}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞: {e}")
            update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ –¥–ª—è {ip}")
    
    elif text.replace('.', '').isdigit():  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IP
        ip_manager.add_ignored_ip(text)
        update.message.reply_text(f"‚úÖ IP {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ.")
    
    else:
        update.message.reply_text("‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    start_scheduler(updater)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL} –º–∏–Ω—É—Ç")
    updater.idle()

if __name__ == '__main__':
    main()