import asyncio
import logging
import os
import threading
import time
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
from ipaddress import IPv4Network

import pandas as pd
import schedule
from dotenv import load_dotenv
from scapy.all import ARP, Ether, conf, srp
from scapy.error import Scapy_Exception
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (Application, CallbackContext, CommandHandler,
                          MessageHandler, filters)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
NETWORK = os.getenv('NETWORK', '192.168.1.0/24')
ADMIN_IDS = [int(id_str.strip()) for id_str in os.getenv('ADMIN_IDS', '').split(',') if id_str.strip()]
SCAN_INTERVAL = int(os.getenv('SCAN_INTERVAL', '15'))  # –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
CRITICAL_TAG = os.getenv('CRITICAL_TAG', 'Critical')

# –§–∞–π–ª—ã
IGNORED_IPS_FILE = 'ignored_ips.txt'
SCAN_RESULTS_FILE = 'ip_scan_results.xlsx'
SCAN_HISTORY_FILE = 'scan_history.xlsx'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Scapy
conf.verb = 0  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ Scapy

class IPManager:
    def __init__(self):
        self.ignored_ips = self._load_ignored_ips()
        self.last_results = None
        self.critical_changes = []
    
    def _load_ignored_ips(self):
        try:
            with open(IGNORED_IPS_FILE, 'r') as f:
                return set(line.strip() for line in f if line.strip())
        except FileNotFoundError:
            return set()
    
    def save_ignored_ips(self):
        with open(IGNORED_IPS_FILE, 'w') as f:
            for ip in sorted(self.ignored_ips):
                f.write(f"{ip}\n")
    
    def add_ignored_ip(self, ip):
        if self._validate_ip(ip):
            self.ignored_ips.add(ip)
            self.save_ignored_ips()
            return True
        return False
    
    def remove_ignored_ip(self, ip):
        if ip in self.ignored_ips:
            self.ignored_ips.remove(ip)
            self.save_ignored_ips()
            return True
        return False
    
    def _validate_ip(self, ip):
        try:
            ip_address(ip)
            return True
        except ValueError:
            return False
    
    def check_critical_changes(self, new_results):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤"""
        if self.last_results is None:
            self.last_results = new_results
            return []
        
        critical_prev = self.last_results[self.last_results['Tags'] == CRITICAL_TAG]
        critical_new = new_results[new_results['Tags'] == CRITICAL_TAG]
        
        changes = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        for ip in critical_prev['IP']:
            if ip in critical_new['IP'].values:
                prev_status = critical_prev[critical_prev['IP'] == ip]['Status'].values[0]
                new_status = critical_new[critical_new['IP'] == ip]['Status'].values[0]
                
                if prev_status != new_status:
                    changes.append(f"{ip}: {prev_status} ‚Üí {new_status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
        new_critical = set(critical_new['IP']) - set(critical_prev['IP'])
        for ip in new_critical:
            changes.append(f"–ù–æ–≤—ã–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–∑–µ–ª: {ip}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
        missing_critical = set(critical_prev['IP']) - set(critical_new['IP'])
        for ip in missing_critical:
            changes.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–∑–µ–ª –ø—Ä–æ–ø–∞–ª: {ip}")
        
        self.last_results = new_results
        self.critical_changes = changes
        return changes

ip_manager = IPManager()

def arp_scan_network(network: str) -> set:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç ARP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç set –∞–∫—Ç–∏–≤–Ω—ã—Ö IP"""
    try:
        # –°–æ–∑–¥–∞–µ–º ARP-–∑–∞–ø—Ä–æ—Å
        arp_request = ARP(pdst=network)
        broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast/arp_request
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º 2 —Å–µ–∫—É–Ω–¥—ã
        answered = srp(arp_request_broadcast, timeout=2, verbose=False)[0]
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç–∏–≤—à–∏–µ IP
        active_ips = {received.psrc for sent, received in answered}
        logger.info(f"ARP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–æ {len(active_ips)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        return active_ips
        
    except Scapy_Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ARP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return set()
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ ARP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return set()

async def check_host_availability(ip: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é ping"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        response = await asyncio.create_subprocess_exec(
            'ping', '-c', '1', '-W', '1', ip,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await response.communicate()
        
        if response.returncode == 0:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏–∑ –≤—ã–≤–æ–¥–∞ ping
            time_line = [line for line in stdout.decode().split('\n') 
                        if 'time=' in line][0]
            latency = float(time_line.split('time=')[1].split(' ')[0])
            return {'ip': ip, 'status': 'Online', 'latency': latency}
        else:
            return {'ip': ip, 'status': 'Offline', 'latency': None}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {ip}: {e}")
        return {'ip': ip, 'status': 'Error', 'latency': None}

async def scan_network(network: str) -> pd.DataFrame:
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å ARP –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ {network}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ IP –≤ —Å–µ—Ç–∏
    all_ips = {str(ip) for ip in IPv4Network(network).hosts()}
    logger.info(f"–í—Å–µ–≥–æ IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —Å–µ—Ç–∏: {len(all_ips)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ IP —á–µ—Ä–µ–∑ ARP
    arp_active_ips = arp_scan_network(network)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ IP
    ips_to_check = [ip for ip in arp_active_ips if ip not in ip_manager.ignored_ips]
    logger.info(f"IP –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {len(ips_to_check)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
    tasks = [check_host_availability(ip) for ip in ips_to_check]
    results = await asyncio.gather(*tasks)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ online —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
    online_results = [r for r in results if r['status'] == 'Online']
    
    df = pd.DataFrame({
        'IP': [r['ip'] for r in online_results],
        'Status': 'Online',
        'Latency (ms)': [r['latency'] for r in online_results],
        'Last Seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'Tags': ''
    })
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–≥–æ–≤
    try:
        prev_df = pd.read_excel(SCAN_RESULTS_FILE)
        df = df.merge(prev_df[['IP', 'Tags']], on='IP', how='left')
        df['Tags'] = df['Tags_y'].combine_first(df['Tags_x'])
        df.drop(['Tags_x', 'Tags_y'], axis=1, inplace=True)
    except FileNotFoundError:
        pass
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    df.to_excel(SCAN_RESULTS_FILE, index=False)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    try:
        history_df = pd.read_excel(SCAN_HISTORY_FILE)
    except FileNotFoundError:
        history_df = pd.DataFrame()
    
    history_df = pd.concat([history_df, df], ignore_index=True)
    history_df.to_excel(SCAN_HISTORY_FILE, index=False)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
    ip_manager.check_critical_changes(df)
    
    logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(online_results)}")
    return df

async def scheduled_scan(context: CallbackContext):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"""
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏...")
    try:
        df = await scan_network(NETWORK)
        online_count = len(df)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤
        if ip_manager.critical_changes:
            message = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–∞—Ö:\n" + "\n".join(ip_manager.critical_changes)
            for admin_id in ADMIN_IDS:
                await context.bot.send_message(chat_id=admin_id, text=message)
        
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {online_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def start_scheduler(application):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    schedule.every(SCAN_INTERVAL).minutes.do(
        lambda: asyncio.run_coroutine_threadsafe(scheduled_scan(application), application.loop)
    )
    
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(1)
    
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    keyboard = [
        ['üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å', 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'],
        ['üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ IP', 'üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.full_name}! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏.\n"
        f"–ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL} –º–∏–Ω.",
        reply_markup=reply_markup
    )

async def handle_scan(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"""
    await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...")
    try:
        df = await scan_network(NETWORK)
        online_count = len(df)
        await update.message.reply_text(
            f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {online_count}\n"
            f"–§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {SCAN_RESULTS_FILE}"
        )
        
        if ip_manager.critical_changes:
            message = "üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–∞—Ö:\n" + "\n".join(ip_manager.critical_changes)
            await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ç–∏!")

async def handle_results(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        with open(SCAN_RESULTS_FILE, 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename='scan_results.xlsx',
                caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"
            )
    except FileNotFoundError:
        await update.message.reply_text("‚ÑπÔ∏è –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")

async def handle_ignored_ips(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö IP"""
    if not ip_manager.ignored_ips:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤.")
        return
    
    ips = "\n".join(sorted(ip_manager.ignored_ips))
    await update.message.reply_text(
        f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ IP-–∞–¥—Ä–µ—Å–∞:\n{ips}\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å IP –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.\n"
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å IP –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—É–¥–∞–ª–∏—Ç—å IP'."
    )

async def handle_tag_management(update: Update, context: CallbackContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ –¥–ª—è IP-–∞–¥—Ä–µ—Å–æ–≤"""
    try:
        df = pd.read_excel(SCAN_RESULTS_FILE)
        critical_ips = df[df['Tags'] == CRITICAL_TAG]['IP'].tolist()
        
        if critical_ips:
            message = (f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã ({CRITICAL_TAG}):\n" + 
                      "\n".join(critical_ips) + 
                      "\n\n–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥: '—Ç–µ–≥ IP'\n–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥: '—É–¥–∞–ª–∏—Ç—å IP'")
        else:
            message = (f"–ù–µ—Ç —É–∑–ª–æ–≤ —Å —Ç–µ–≥–æ–º {CRITICAL_TAG}.\n\n"
                      "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥: '—Ç–µ–≥ IP'")
        
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–µ–≥–∞–º–∏")

async def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.strip()
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if text == 'üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å':
        await handle_scan(update, context)
    elif text == 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
        await handle_results(update, context)
    elif text == 'üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ IP':
        await handle_ignored_ips(update, context)
    elif text == 'üè∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏':
        await handle_tag_management(update, context)
    elif text.startswith('—Ç–µ–≥ '):
        ip = text[4:].strip()
        try:
            df = pd.read_excel(SCAN_RESULTS_FILE)
            if ip in df['IP'].values:
                df.loc[df['IP'] == ip, 'Tags'] = CRITICAL_TAG
                df.to_excel(SCAN_RESULTS_FILE, index=False)
                await update.message.reply_text(f"‚úÖ –¢–µ–≥ '{CRITICAL_TAG}' –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {ip}")
            else:
                await update.message.reply_text(f"‚ùå IP {ip} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞: {e}")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –¥–ª—è {ip}")
    elif text.startswith('—É–¥–∞–ª–∏—Ç—å '):
        ip = text[8:].strip()
        if ip_manager.remove_ignored_ip(ip):
            await update.message.reply_text(f"‚úÖ IP {ip} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö")
        else:
            await update.message.reply_text(f"‚ùå IP {ip} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö")
    elif text.replace('.', '').isdigit() and len(text.split('.')) == 4:
        if ip_manager.add_ignored_ip(text):
            await update.message.reply_text(f"‚úÖ IP {text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è ARP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if os.geteuid() != 0:
        logger.warning("–î–ª—è ARP-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)")
    
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    start_scheduler(application)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {SCAN_INTERVAL} –º–∏–Ω—É—Ç")

if __name__ == '__main__':
    main()